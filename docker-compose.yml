version: '3'
services:
  auth:
    build:
      context: ./clinic-auth
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - 9000:9000
    env_file:
      - ./clinic-auth/.env
    networks:
      - backend
    volumes:
      - ./clinic-auth:/app/auth
      - /app/auth/node_modules
    depends_on:
      - rabbitmq
    logging:
      driver: fluentd
      options:
        fluentd-async: 'true'
        fluentd-address: localhost:24224
        tag: auth-service
  appt:
    build:
      context: ./clinic-appoinment
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - '9001:9001'
    env_file:
      - ./clinic-appoinment/.env
    networks:
      - backend
    volumes:
      - ./appt:/app/appt
      - /app/appt/node_modules
    logging:
      driver: fluentd
      options:
        fluentd-async: 'true'
        fluentd-address: localhost:24224
        tag: appt-service
    depends_on:
      - rabbitmq
  kong:
    build:
      context: ./kong
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8443:8443'
    networks:
      - backend
    logging:
      driver: fluentd
      options:
        fluentd-async: 'true'
        fluentd-address: localhost:24224
        tag: kong
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=master123
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    networks:
      - backend
  redis:
    image: redis:latest
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass master123
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - backend
  fluent-bit:
    environment:
      LOG_LEVEL: debug
      LOKI_URL: http://loki:3100/loki/api/v1/push
    build:
      context: ./fluent-bit
      dockerfile: Dockerfile
    ports:
      - '24224:24224'
      - '24224:24224/udp'
    networks:
      - backend
  loki:
    image: grafana/loki:latest
    expose:
      - '3100'
    networks:
      - backend
  grafana:
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    networks:
      - backend
  renderer:
    image: grafana/grafana-image-renderer:latest
    expose:
      - '8081'
    environment:
      ENABLE_METRICS: 'true'
    networks:
      - backend
networks:
  backend:
    driver: bridge
volumes:
  rabbit_data:
    driver: local
  redis_data:
    driver: local
